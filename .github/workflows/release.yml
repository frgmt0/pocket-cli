name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Extract version from tag
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Pocket ${{ github.ref_name }}
          draft: false
          prerelease: false
          body_path: .github/RELEASE_TEMPLATE.md

  publish-crate:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Publish
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

  build-binaries:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: pocket-linux
            asset_name: pocket-linux-amd64
          - os: windows-latest
            artifact_name: pocket-windows.exe
            asset_name: pocket-windows-amd64.exe
          - os: macos-latest
            artifact_name: pocket-macos
            asset_name: pocket-macos-amd64
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - name: Build
        run: cargo build --release
      - name: Prepare binary
        if: matrix.os != 'windows-latest'
        run: |
          cp target/release/pocket ${{ matrix.artifact_name }}
      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/release/pocket.exe ${{ matrix.artifact_name }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream 